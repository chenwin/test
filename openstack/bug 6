Using --device you can add a host device to the container without the
--privileged flag.

DEVICE_PATH_REGEX = r"^/dev/[/_\-a-zA-Z0-9]+$"


        DEVICES: properties.Schema(
            properties.Schema.LIST,
            _('Device mappings (only supported for API version >= %s).') %
            DEVICE_MIN_API_VERSION,
            schema=properties.Schema(
                properties.Schema.MAP,
                schema={
                    PATH_ON_HOST: properties.Schema(
                        properties.Schema.STRING,
                        _('The device path on the host.'),
                        constraints=[
                            constraints.Length(max=255),
                            constraints.AllowedPattern(DEVICE_PATH_REGEX),
                        ],
                        required=True
                    ),
                    PATH_IN_CONTAINER: properties.Schema(
                        properties.Schema.STRING,
                        _('The device path of the container'
                          ' mappings to the host.'),
                        constraints=[
                            constraints.Length(max=255),
                            constraints.AllowedPattern(DEVICE_PATH_REGEX),
                        ],
                        required=True
                    ),
                    PERMISSIONS: properties.Schema(
                        properties.Schema.STRING,
                        _('The permissions of the container to'
                          ' read/write/create the devices.'),
                        constraints=[
                            constraints.AllowedValues(['r', 'w', 'm',
                                                       'rw', 'rm', 'wm',
                                                       'rwm']),
                        ],
                        default='rwm',
                        required=True
                    )
                }
            ),
            default=[],
            support_status=support.SupportStatus(version='2015.1'),
        ),


        if self.properties[self.DEVICES] and\
                not self.properties[self.PRIVILEGED]:
                

    def test_start_with_mapping_devices_also_with_privileged(self):
        t = template_format.parse(template)
        stack = utils.parse_stack(t)
        definition = stack.t.resource_definitions(stack)['Blog']
        definition['Properties']['devices'] = \
            [{'path_on_host': '/dev/sdb',
              'path_on_container': '/dev/xvdc',
              'permissions': 'r'}]
        definition['Properties']['privileged'] = True
        my_resource = docker_container.DockerContainer(
            'Blog', definition, stack)
        get_client_mock = self.patchobject(my_resource, 'get_client')
        get_client_mock.return_value = fakeclient.FakeDockerClient()
        self.assertIsNone(my_resource.validate())
        scheduler.TaskRunner(my_resource.create)()
        self.assertEqual((my_resource.CREATE, my_resource.COMPLETE),
                         my_resource.state)
        client = my_resource.get_client()
        self.assertEqual(['samalba/wordpress'], client.pulled_images)
        self.assertIs([], client.container_start[0]['devices'])
