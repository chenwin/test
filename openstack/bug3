DEVICES,

'devices'

    _DEVICES_KEYS = (
        DEVICE, PATH_ON_HOST, PATH_IN_CONTAINER, PERMISSIONS
    ) = (
        'device', 'path_on_host', 'path_on_container', 'permissions'
    )
    

        DEVICES: properties.Schema(
            properties.Schema.LIST,
            _('Device mappings (only supported for API version >= 1.2.0).'),
            schema=properties.Schema(
                properties.Schema.MAP,
                schema={
                    PATH_ON_HOST: properties.Schema(
                        properties.Schema.STRING,
                        _('The device path on the host.'),
                        constraints.Length(min=8, max=256),
                        constraints.AllowedPattern(r"^/dev/[/_\-a-zA-Z0-9]*"),
                        required=True
                    ),
                    PATH_IN_CONTAINER: properties.Schema(
                        properties.Schema.STRING,
                        _('The device path of the container'
                          ' mappings to the host.'),
                        constraints.Length(min=8, max=256),
                        constraints.AllowedPattern(r"^/dev/[/_\-a-zA-Z0-9]*"),
                        required=True
                    ),
                    PERMISSIONS: properties.Schema(
                        properties.Schema.STRING,
                        _('The permissions of the container to'
                          ' read/write/create the devices.'),
                        constraints=[
                            constraints.AllowedValues(['r', 'w', 'm',
                                                       'rw', 'rm', 'wm',
                                                       'rwm']),
                        ],
                        default='rwm',
                        required=True
                    )
                },
                required=True
            ),
            default=[],
            support_status=support.SupportStatus(version='2015.1'),
        ),


        if self.properties[self.DEVICES]:
            start_args['devices'] = self._get_mapping_devices(
                self.properties[self.DEVICES])
            
    def _get_mapping_devices(self, devices):
        actual_devices = []
        for device in devices:
            actual_devices.append(device[self.PATH_ON_HOST] + ':' +
                                  device[self.PATH_IN_CONTAINER] + ':' +
                                  device[self.PERMISSIONS])
        return actual_devices


    def test_start_with_mapping_devices(self):
        t = template_format.parse(template)
        stack = utils.parse_stack(t)
        definition = stack.t.resource_definitions(stack)['Blog']
        definition['Properties']['devices'] = \
            [{'path_on_host': '/dev/sda',
              'path_on_container': '/dev/xvdc',
              'permissions': 'r'},
             {'path_on_host': '/dev/mapper/a_bc-d',
              'path_on_container': '/dev/xvdd',
              'permissions': 'rw'}]
        my_resource = docker_container.DockerContainer(
            'Blog', definition, stack)
        get_client_mock = self.patchobject(my_resource, 'get_client')
        get_client_mock.return_value = fakeclient.FakeDockerClient()
        self.assertIsNone(my_resource.validate())
        scheduler.TaskRunner(my_resource.create)()
        self.assertEqual((my_resource.CREATE, my_resource.COMPLETE),
                         my_resource.state)
        client = my_resource.get_client()
        self.assertEqual(['samalba/wordpress'], client.pulled_images)
        self.assertIs(definition['Properties']['devices'],
                      client.container_start[0]['devices'])



    def test_start_with_mapping_devices_wrong_allowed_pattern(self):
        t = template_format.parse(template)
        stack = utils.parse_stack(t)
        definition = stack.t.resource_definitions(stack)['Blog']
        definition['Properties']['devices'] = \
            [{'path_on_host': '/sda',
              'path_on_container': '/dev/xvdc',
              'permissions': 'r'}]
        msg = self.assertRaises(exception.ResourceFailure,
                                docker_container.DockerContainer(
                                    'Blog', definition, stack))
        expected = ('InvalidSchemaError: "%s" does not match pattern "%s"'
                    % (definition['Properties']['devices'],
                       self.pattern))
        self.assertEqual(expected, six.text_type(msg))
